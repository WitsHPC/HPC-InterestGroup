/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => SmartRenamePlugin
});
module.exports = __toCommonJS(main_exports);

// InvalidCharacterAction.ts
var InvalidCharacterAction = /* @__PURE__ */ ((InvalidCharacterAction2) => {
  InvalidCharacterAction2["Error"] = "Error";
  InvalidCharacterAction2["Remove"] = "Remove";
  InvalidCharacterAction2["Replace"] = "Replace";
  return InvalidCharacterAction2;
})(InvalidCharacterAction || {});

// SmartRenameSettingsTab.ts
var import_obsidian = require("obsidian");
var SmartRenameSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Smart Rename" });
    new import_obsidian.Setting(containerEl).setName("Invalid characters action").setDesc("How to process invalid characters in the new title").addDropdown((dropdownComponent) => {
      dropdownComponent.addOptions({
        Error: "Show error",
        Remove: "Remove invalid characters",
        Replace: "Replace invalid character with"
      }).setValue(this.plugin.settings.invalidCharacterAction).onChange(async (value) => {
        this.plugin.settings.invalidCharacterAction = InvalidCharacterAction[value];
        await this.plugin.saveSettings();
        this.renderReplacementCharacterSettingEl(replacementCharacterSettingEl);
        this.renderStoreInvalidTitleSettingEl(storeInvalidTitleSettingEl);
      });
      const replacementCharacterSettingEl = containerEl.createDiv();
      this.renderReplacementCharacterSettingEl(replacementCharacterSettingEl);
      const storeInvalidTitleSettingEl = containerEl.createDiv();
      this.renderStoreInvalidTitleSettingEl(storeInvalidTitleSettingEl);
    });
    new import_obsidian.Setting(containerEl).setName("Update title key").setDesc("Update title key in frontmatter").addToggle((togleComponent) => {
      togleComponent.setValue(this.plugin.settings.shouldUpdateTitleKey).onChange(async (value) => {
        this.plugin.settings.shouldUpdateTitleKey = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Update first header").setDesc("Update first header if it is present in the document. May conflict with the `Filename Heading Sync` plugin").addToggle((togleComponent) => {
      togleComponent.setValue(this.plugin.settings.shouldUpdateFirstHeader).onChange(async (value) => {
        this.plugin.settings.shouldUpdateFirstHeader = value;
        await this.plugin.saveSettings();
      });
    });
  }
  renderReplacementCharacterSettingEl(replacementCharacterSettingEl) {
    replacementCharacterSettingEl.empty();
    if (this.plugin.settings.invalidCharacterAction === "Replace" /* Replace */) {
      new import_obsidian.Setting(replacementCharacterSettingEl).setName("Replacement character").setDesc("Character to replace invalid character with").addText((textComponent) => {
        textComponent.inputEl.maxLength = 1;
        textComponent.inputEl.required = true;
        textComponent.inputEl.addEventListener("blur", () => {
          textComponent.inputEl.reportValidity();
        });
        textComponent.setValue(this.plugin.settings.replacementCharacter).onChange(async (value) => {
          if (this.plugin.hasInvalidCharacters(value)) {
            textComponent.inputEl.setCustomValidity("Invalid replacement character");
          } else {
            textComponent.inputEl.setCustomValidity("");
          }
          if (textComponent.inputEl.reportValidity()) {
            this.plugin.settings.replacementCharacter = value;
            await this.plugin.saveSettings();
          }
        });
      });
    }
  }
  renderStoreInvalidTitleSettingEl(storeInvalidTitleSettingEl) {
    storeInvalidTitleSettingEl.empty();
    if (this.plugin.settings.invalidCharacterAction === "Error" /* Error */) {
      return;
    }
    new import_obsidian.Setting(storeInvalidTitleSettingEl).setName("Store invalid title").setDesc("If enabled, stores title with invalid characters. If disabled, stores the sanitized version").addToggle((togleComponent) => {
      togleComponent.setValue(this.plugin.settings.shouldStoreInvalidTitle).onChange(async (value) => {
        this.plugin.settings.shouldStoreInvalidTitle = value;
        await this.plugin.saveSettings();
      });
    });
  }
};

// SmartRenameSettings.ts
var SmartRenameSettings = class {
  constructor() {
    this.invalidCharacterAction = "Error" /* Error */;
    this.replacementCharacter = "_";
    this.shouldStoreInvalidTitle = true;
    this.shouldUpdateTitleKey = false;
    this.shouldUpdateFirstHeader = false;
  }
};

// SmartRenamePlugin.ts
var import_obsidian3 = require("obsidian");

// prompt.ts
var import_obsidian2 = require("obsidian");
async function prompt(app, promptText) {
  return await PromptModal.getResult(app, promptText);
}
var PromptModal = class extends import_obsidian2.Modal {
  constructor(app, promptText) {
    super(app);
    this.value = "";
    this.isCancelled = true;
    this.promptText = promptText;
    this.promise = new Promise((resolve) => {
      this.resolve = resolve;
    });
    this.open();
  }
  onOpen() {
    this.titleEl.setText(this.promptText);
    const textComponent = new import_obsidian2.TextComponent(this.contentEl);
    textComponent.inputEl.style.width = "100%";
    textComponent.setPlaceholder("New title");
    textComponent.onChange((value) => this.value = value);
    textComponent.inputEl.addEventListener("keydown", (evt) => {
      if (evt.key === "Enter") {
        evt.preventDefault();
        this.isCancelled = false;
        this.close();
      }
    });
  }
  onClose() {
    this.resolve(this.isCancelled ? "" : this.value);
  }
  static async getResult(app, promptText) {
    const modal = new PromptModal(app, promptText);
    return await modal.promise;
  }
};

// SmartRenamePlugin.ts
var SmartRenamePlugin = class extends import_obsidian3.Plugin {
  constructor() {
    super(...arguments);
    this.obsidianForbiddenCharactersRegExp = /[#^[\]|]/g;
    this.backlinksToFix = /* @__PURE__ */ new Map();
  }
  async onload() {
    await this.loadSettings();
    this.addCommand({
      id: "smart-rename",
      name: "Smart Rename",
      checkCallback: (checking) => {
        const activeFile = this.app.workspace.getActiveFile();
        if (!checking) {
          this.smartRename(activeFile);
        }
        return activeFile !== null;
      }
    });
    this.addSettingTab(new SmartRenameSettingsTab(this.app, this));
    const isWindows = document.body.hasClass("mod-windows");
    this.systemForbiddenCharactersRegExp = isWindows ? /[*"\\/<>:|?]/g : /[\\/]/g;
    this.registerEvent(this.app.metadataCache.on("resolved", this.fixModifiedBacklinks.bind(this)));
  }
  async smartRename(activeFile) {
    this.currentNoteFile = activeFile;
    this.oldTitle = this.currentNoteFile.basename;
    this.newTitle = await prompt(this.app, "Enter new title");
    let titleToStore = this.newTitle;
    if (this.hasInvalidCharacters(this.newTitle)) {
      switch (this.settings.invalidCharacterAction) {
        case "Error" /* Error */:
          new import_obsidian3.Notice("The new title has invalid characters");
          return;
        case "Remove" /* Remove */:
          this.newTitle = this.replaceInvalidCharacters(this.newTitle, "");
          break;
        case "Replace" /* Replace */:
          this.newTitle = this.replaceInvalidCharacters(this.newTitle, this.settings.replacementCharacter);
          break;
      }
    }
    if (!this.settings.shouldStoreInvalidTitle) {
      titleToStore = this.newTitle;
    }
    if (titleToStore && this.settings.shouldStoreInvalidTitle && titleToStore !== this.newTitle) {
      this.addAlias(titleToStore);
    }
    if (titleToStore && this.settings.shouldUpdateTitleKey) {
      await this.app.fileManager.processFrontMatter(this.currentNoteFile, (frontMatter) => {
        frontMatter.title = titleToStore;
      });
    }
    if (titleToStore && this.settings.shouldUpdateFirstHeader) {
      await this.app.vault.process(this.currentNoteFile, (content) => content.replace(/^((---\n(.|\n)+?---\n)?(.|\n)*\n)# .+/, `$1# ${titleToStore}`));
    }
    this.newPath = `${this.currentNoteFile.parent.path}/${this.newTitle}.md`;
    const validationError = await this.getValidationError();
    if (validationError) {
      new import_obsidian3.Notice(validationError);
      return;
    }
    this.prepareBacklinksToFix();
    await this.addAlias(this.oldTitle);
    await this.app.fileManager.renameFile(this.currentNoteFile, this.newPath);
    this.isReadyToFixBacklinks = true;
  }
  async getValidationError() {
    if (!this.newTitle) {
      return "No new title provided";
    }
    if (this.newTitle === this.oldTitle) {
      return "The title did not change";
    }
    if (await this.app.vault.adapter.exists(this.newPath)) {
      return "Note with the new title already exists";
    }
    return null;
  }
  prepareBacklinksToFix() {
    var _a;
    const backlinksData = this.app.metadataCache.getBacklinksForFile(this.currentNoteFile).data;
    for (const backlinkFilePath of Object.keys(backlinksData)) {
      const indicesToFix = /* @__PURE__ */ new Set();
      const cache = this.app.metadataCache.getCache(backlinkFilePath);
      if (cache === null) {
        continue;
      }
      const linksToFix = new Set(backlinksData[backlinkFilePath]);
      const links = this.getLinksAndEmbeds(cache);
      for (let linkIndex = 0; linkIndex < links.length; linkIndex++) {
        const link = links[linkIndex];
        if (!linksToFix.has(link)) {
          continue;
        }
        const displayText = (_a = link.displayText) == null ? void 0 : _a.split(" > ")[0].split("/").pop();
        if (displayText === this.oldTitle || link.original.includes(`[${this.oldTitle}]`)) {
          indicesToFix.add(linkIndex);
        }
      }
      if (indicesToFix.size > 0) {
        this.backlinksToFix.set(backlinkFilePath, indicesToFix);
      }
    }
  }
  async addAlias(alias) {
    await this.app.fileManager.processFrontMatter(this.currentNoteFile, (frontMatter) => {
      const aliases = (0, import_obsidian3.parseFrontMatterAliases)(frontMatter) || [];
      if (!aliases.includes(alias)) {
        aliases.push(alias);
      }
      frontMatter.aliases = aliases;
    });
  }
  async editFileLinks(filePath, linkProcessor) {
    await this.app.vault.adapter.process(filePath, (content) => {
      let newContent = "";
      let contentIndex = 0;
      const cache = this.app.metadataCache.getCache(filePath);
      if (cache === null) {
        return content;
      }
      const links = this.getLinksAndEmbeds(cache);
      for (let linkIndex = 0; linkIndex < links.length; linkIndex++) {
        const link = links[linkIndex];
        newContent += content.substring(contentIndex, link.position.start.offset);
        let newLink = linkProcessor(link, linkIndex);
        if (newLink === void 0) {
          newLink = link.original;
        }
        newContent += newLink;
        contentIndex = link.position.end.offset;
      }
      newContent += content.substring(contentIndex, content.length);
      return newContent;
    });
  }
  getLinksAndEmbeds(cache) {
    const links = new Array();
    if (cache.links) {
      links.push(...cache.links);
    }
    if (cache.embeds) {
      links.push(...cache.embeds);
    }
    links.sort((a, b) => a.position.start.offset - b.position.start.offset);
    return links;
  }
  async fixModifiedBacklinks() {
    if (!this.isReadyToFixBacklinks) {
      return;
    }
    this.isReadyToFixBacklinks = false;
    for (const [backlinkFilePath, indicesToFix] of this.backlinksToFix.entries()) {
      await this.editFileLinks(backlinkFilePath, (link, linkIndex) => {
        if (!indicesToFix.has(linkIndex)) {
          return;
        }
        const isWikilink = link.original.includes("]]");
        return isWikilink ? link.original.replace(/(\|.+)?\]\]/, `|${this.oldTitle}]]`) : link.original.replace(`[${this.newTitle}]`, `[${this.oldTitle}]`);
      });
    }
    this.backlinksToFix.clear();
  }
  async loadSettings() {
    this.settings = Object.assign(new SmartRenameSettings(), await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  hasInvalidCharacters(str) {
    return this.systemForbiddenCharactersRegExp.test(str) || this.obsidianForbiddenCharactersRegExp.test(str);
  }
  replaceInvalidCharacters(str, replacement) {
    return str.replace(this.systemForbiddenCharactersRegExp, replacement).replace(this.obsidianForbiddenCharactersRegExp, replacement);
  }
};
